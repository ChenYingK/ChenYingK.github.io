<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Maven</title>
    <url>/posts/38008.html</url>
    <content><![CDATA[<h4 id="Maven入门"><a href="#Maven入门" class="headerlink" title="Maven入门"></a>Maven入门</h4><p>maven是Java平台上的自动化构建工具</p>
<ul>
<li>关于构建的各个环节<ol>
<li>清理：将之前编译得到的旧的class字节码文件删除，为下一次编译做准备。</li>
<li>编译：将Java源代码编译成class字节码。</li>
<li>测试：自动测试，自动调用junit程序。</li>
<li>报告：测试程序执行的结果。</li>
<li>打包：动态Web工程打war包，Java工程打jar包。</li>
<li>安装：Maven特定的概念——将打包得到文件复制到“仓库”中指定的位置。</li>
<li>部署：将动态Web工程生成的war包复制到Servlet容器的指定目录下，使其可以运行。</li>
</ol>
</li>
</ul>
<ol>
<li>创建约定的目录结构<ol>
<li>根目录：工程名</li>
<li>src目录：源码</li>
<li>pom.xml文件：Maven核心配置文件</li>
<li>main目录：存放程序</li>
<li>test目录：存放测试程序</li>
<li>java目录：存放java源文件</li>
<li>resources目录：存放框架或者其他工具的配置文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my-app</span><br><span class="line">|-- pom.xml</span><br><span class="line">`-- src</span><br><span class="line">    |-- main</span><br><span class="line">    |   |-- java</span><br><span class="line">    |   |   `-- com</span><br><span class="line">    |   |       `-- mycompany</span><br><span class="line">    |   |           `-- app</span><br><span class="line">    |   |               `-- App.java</span><br><span class="line">    |   `-- resources</span><br><span class="line">    |       `-- META-INF</span><br><span class="line">    |           `-- application.properties</span><br><span class="line">    `-- test</span><br><span class="line">        `-- java</span><br><span class="line">            `-- com</span><br><span class="line">                `-- mycompany</span><br><span class="line">                    `-- app</span><br><span class="line">                        `-- AppTest.java</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>为什么要遵守约定的目录结构？<ol>
<li>Maven负责这个项目的自动化构建，以编译为例，Maven要想自动编译，那么它必须知道Java源文件保存在哪里。</li>
<li>如果自己定义的东西想要让框架或者工具知道，有两种办法：<ol>
<li>以配置的方式明确告诉框架。</li>
<li>遵循框架内部已经存在的约定。<br>比如log4j.xml</li>
<li>约定&gt;配置&gt;编码。</li>
</ol>
</li>
</ol>
</li>
<li>常用Maven命令<ol>
<li>注意：执行与构建过程相关的Maven命令，必须进入pom.xml所在的目录。<br>与构建过程相关的操作：编译、测试、打包。。。</li>
<li>常用命令<ol>
<li>mvn clean：清理。</li>
<li>mvn compile ：编译主程序。</li>
<li>mvn test-compile：编译测试程序。</li>
<li>mvn test：执行测试。</li>
<li>mvn package：打包。</li>
</ol>
</li>
<li>关于联网问题<ol>
<li>Maven的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须由特定的插件来完成。而插件本身并不包含在Maven的核心程序中。</li>
<li>当执行Maven命令需要用到某些插件是，Maven核心程序会首先到本地仓库中查找。</li>
<li>Maven核心程序如果在本地仓库中找不到需要的插件，那么会自动连接外网，到中央仓库中下载。</li>
</ol>
</li>
</ol>
</li>
<li>POM<ol>
<li>含义（Project Object Model）项目对象模型。类似于DOM Docment Object Model文档对象模型。</li>
<li>pom.xml对于Maven工程是核心配置文件，与构建过程相关的一切设置都在这个文件中进行配置。</li>
<li>坐标<ol>
<li>数学中的坐标<ol>
<li>平面上，使用X、Y两个向量可以唯一确定平面中的任何一个点。</li>
<li>在空间中，使用X、Y、Z三个向量可以唯一定位空间中的任何一个点。</li>
</ol>
</li>
<li>Maven的坐标<br>使用下面三个向量可以在仓库中唯一定位一个Maven工程<ol>
<li>groupId：公司或者组织域名倒序+项目名<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupid</span>&gt;</span>com.proton.projectname<span class="tag">&lt;/<span class="name">groupid</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>artifactId：模块名<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>modulename<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>version：版本<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>Maven工程的坐标与仓库中路径的对应关系<ol>
<li>坐标<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>路径<br>命名规则：参照坐标<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">\repository\org\mybatis\mybatis\3.5.7\mybatis-3.5.7.jar</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li>仓库：<ol>
<li>分类：<ol>
<li>本地仓库：当前电脑上部署的仓库目录，为当前电脑上所有Maven工程服务。</li>
<li>远程仓库：<ol>
<li>私服：搭建在局域网中，为局域网范围内的所有Maven工程服务。</li>
<li>中央仓库：架设在Internet上，为世界所有Maven工程服务。</li>
<li>中央仓库镜像：为了分担中央仓库的流量，提升用户访问速度。</li>
</ol>
</li>
</ol>
</li>
<li>仓库中保存的内容：Maven工程<ol>
<li>Mavne自身所需要的插件</li>
<li>第三方框架或者工具的jar包</li>
<li>自己开发的Maven工程。</li>
</ol>
</li>
</ol>
</li>
<li>依赖(dependency)<ol>
<li>Maven解析依赖信息时会到本地仓库中查找被依赖的jar包<br>对于我们自己开发的maven工程，使用 mvn install命令安装后就可以进入仓库。</li>
<li>依赖的范围<ol>
<li>compile<br>compile描述的是jar包在编译阶段是否可用，是否参与到编译中。主程序可以使用范围为compile的依赖。测试程序也可以使用，并且会被打包到最终的包中。<ol>
<li>对主程序是否有效：有效</li>
<li>对测试程序是否有效：有效</li>
<li>是否参与打包：参与</li>
<li>典型例子：spring-core</li>
</ol>
</li>
<li>test<br>依赖范围为test依赖，对主程序而不可用，主要用于在测试环境中提供给测试程序测试支持。也不会参与到最终的打包。<ol>
<li>对主程序是否有效：无效</li>
<li>对测试程序是否有效：有效</li>
<li>是否参与打包：不参与</li>
<li>典型例子：junit</li>
<li><img src="/.%5CMaven.assets%5Cscope-compile-test.png" alt="image-20210522120546311"></li>
</ol>
</li>
<li>provided<br>描述的是开发阶段。在开发阶段，需要使用一些运行环境的jar包，如果缺少这部分jar包，则开发时编译器报错，而这部分jar包不需要在打包在程序中，在运行环境中会提供，比如tomcat的servlet-api.jar。provided属性标记的jar包，会在开发阶段提供给调用，在部署阶段会被忽略，在运行时，由运行环境中提供。<ol>
<li>对主程序是否有效：有效</li>
<li>对测试程序是否有效：有效</li>
<li>是否参与打包：不参与</li>
<li>是否参与部署：不参与</li>
<li>典型例子：servlet-api.jar<br><img src="/.%5CMaven.assets%5Cprovided.png" alt="image-20210522120048328"></li>
</ol>
</li>
</ol>
</li>
<li>依赖的传递性。在pom直接添加的dependency是直接依赖。如果添加的dependency还有其他依赖，则其他依赖被称作传递过来的依赖。<ol>
<li>依赖传递性的好处：可以传递的依赖不必再每个模块工程中都重复声明，只要在最底层的依赖中即可。</li>
<li>注意事项：依赖传递性仅限于compile范围，非compile范围的依赖不能传递。所以在各个模块工程中，针对test或者provided依赖范围，如果需要就得重复声明依赖。</li>
</ol>
</li>
<li>排除依赖：<br>当前工程有个直接依赖A，但是A也有个依赖B，此时如果不希望将B引入到当前工程中，可以对直接依赖的子依赖进行排除。<ol>
<li>依赖排除的场合：<br>当依赖中A存在着不稳定的依赖B，比如spring-core（A）中引入了一个不稳定的依赖common-log（B）。且不希望将不稳定的依赖（B）加入当前项目，则可以将不稳定的部分排除。</li>
<li>配置方式<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.ykproton<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">			排除依赖，</span></span><br><span class="line"><span class="comment">			排除过后，被排除的依赖传递性停止，不会继续向上传递</span></span><br><span class="line"><span class="comment"> 		--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>依赖冲突时选择原则<br>​    用于解决多个依赖，同时依赖的jar包的冲突。<ol>
<li><p>路径最短者优先原则。<br>如果A依赖B，B依赖C。C使用D的v1版本，B使用D的v2版本。根据路径最短，D-v1距离A最近。此时真正会使用的是D的v1版本。<br><img src="/.%5CMaven.assets%5Cimage-20210522141414168.png" alt="image-20210522120546311"></p>
</li>
<li><p>路径相同时，先声明者优先。先后顺序指的是dependency标签的顺序。<br><img src="/.%5CMaven.assets%5Cimage-20210522141527255.png" alt="image-20210522120546311"></p>
</li>
</ol>
</li>
<li>统一管理依赖版本<br>工程有很多依赖，如果升级依赖，手动修改每一个依赖的版本，容易出现错误，比如漏改错改。<br>可以使用properties标签内，使用自定义标签统一声明版本号。在使用同一版本的位置，引用自定义标签。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- properties标签可以配置多种属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- myApp.spring.version 为自定义标签 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">myApp.spring.version</span>&gt;</span></span><br><span class="line">    4.2.2.RELEASE</span><br><span class="line">  <span class="tag">&lt;/<span class="name">myApp.spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引用自定义标签，$&#123;标签名&#125; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;helloCaller.spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>生命周期<ol>
<li>各个构建环节执行的顺序：不能打乱顺序，必须按照既定的正确顺序执行。</li>
<li>Maven的核心应用程序定义了抽象的生命周期，生命周期中各个阶段的具体任务是由插件来完成的。</li>
<li>Maven核心程序为了更好实现自动化构建，按照这一特点执行生命周期中的各个阶段：无论现在要执行生命周期的哪一个阶段，都是从这个生命周期最初的位置开始执行。</li>
<li>插件和目标：<ol>
<li>生命周期各个阶段仅仅定义了要执行什么任务。</li>
<li>各个阶段和插件的目标是对应的。</li>
<li>相似的目标由特定的插件来完成。<table>
<thead>
<tr>
<th>生命周期阶段</th>
<th>插件目标</th>
<th>插件</th>
</tr>
</thead>
<tbody><tr>
<td>compile</td>
<td>compile</td>
<td>maven-compiler-plugin</td>
</tr>
<tr>
<td>test-compile</td>
<td>testCompile</td>
<td>maven-compiler-plugin</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
</ol>
</li>
<li>继承<br>　多个子项目都需要某些依赖, 就可以把子项目共同的依赖抽取到父项目中, 子项目通过继承得到这些依赖, 这样也更好的来管理(比如升级, 删除等)。也能解决因为范围为test、provided的依赖不能传递，导致的环境不一致的问题。<br>步骤：<ol>
<li>父项目打包方式修改为pom。<br>可以在父工程中，统一管理项目版本号。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.ykproton<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 此处为pom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     		......</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在子工程中声明对父工程的引用<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.ykproton<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>聚合<br>Java项目，往往是多个模块组成，聚合就是将多个模块整合在一起构建。快速构建<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>account<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>聚合的两种结构<ol>
<li>父子结构<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">|-- my-module1</span><br><span class="line">|   `-- pom.xml</span><br><span class="line">|-- my-module2</span><br><span class="line">|   `-- pom.xml</span><br><span class="line">`-- pom.xml</span><br></pre></td></tr></table></figure>
直接指定子项目名即可。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>my-module1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>my-module2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>同级结构<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">|-- my-module1</span><br><span class="line">|   `-- pom.xml</span><br><span class="line">|-- my-module2</span><br><span class="line"> |   `-- pom.xml</span><br><span class="line"> `-- parent</span><br><span class="line">     `-- pom.xml</span><br></pre></td></tr></table></figure>
通过相对路径，进行聚合。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../my-module1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../my-module2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇, 第一个Spring Boot工程</title>
    <url>/posts/24668.html</url>
    <content><![CDATA[<h4 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h4><h4 id="开发第一个SpringBoot工程"><a href="#开发第一个SpringBoot工程" class="headerlink" title="开发第一个SpringBoot工程"></a>开发第一个SpringBoot工程</h4><ol>
<li><h5 id="创建maven工程，添加依赖"><a href="#创建maven工程，添加依赖" class="headerlink" title="创建maven工程，添加依赖"></a>创建maven工程，添加依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><h5 id="添加classpath依赖"><a href="#添加classpath依赖" class="headerlink" title="添加classpath依赖"></a>添加classpath依赖</h5>Spring Boot提供了很多的Starter，可以把需要的jar添加到classpath中。<code>spring-boot-starter-parent  </code>是一个特殊的starter，它提供了很多有用的默认配置。但是它不会添加任何依赖。<br>当需要开发指定类型的程序，可以使用其他的starters。因为要开发的是一个web应用，所以需要添加一个<code>spring-boot-starter-web  </code>依赖。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><h5 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h5>maven的源代码路径在<code>src/main/java</code>,创建如下java文件<code>src/main/java/MyApplication.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><h6 id="RestController与-RequestMapping注解"><a href="#RestController与-RequestMapping注解" class="headerlink" title="@RestController与@RequestMapping注解"></a><code>@RestController</code>与<code>@RequestMapping</code>注解</h6>​    <code>@RestController</code>是一种模式注解（stereotype annotation，主要用于表明当前组件在整个项目中的作用，比如@Service、@Repository、@Controllr）。它的作用是让spring和阅读代码的人知道当前class所扮演的角色。<br>​    <code>@RequestMapping</code>注解提供路由信息。它告诉spring，任何的对/的HTTP请求，都会被映射到home方法上。<code>@RestController</code>让spring直接将字符串结果返回给调用者。</li>
<li><h6 id="EnableAutoConfiguration注解"><a href="#EnableAutoConfiguration注解" class="headerlink" title=" @EnableAutoConfiguration注解"></a><code> @EnableAutoConfiguration</code>注解</h6>​    <code> @EnableAutoConfiguration</code>使用用来让springboot去推测如何配置Spring，主要基于所添加的jar依赖。因为<code>spring-boot-starter-web</code>添加了Tomcat和Spring MVC，自动配置假设当前正在开发一个web应用并作相应的设置。<blockquote>
<p>Starters和自动配置（Auto-configuration）</p>
<p>​    自动配置和“Starters”可以很好的配合，但是这个两个概念并没有直接的关联。可以在sterer之外自由选择jar依赖，Spring Boot会尽可能地自动配置整个应用。</p>
</blockquote>
</li>
<li><h6 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h6>main方法是一个标准的复合Java规范的方法，是整个应用程序的入口。通过调用<code>run</code>方法，main方法完成了对Spring Boot的<code>SpringApplication</code>的代理。<code>SpringApplication</code>启动应用程序，启动Spring，同时自动配置Tomcat服务器。我们需要将<code>MyApplication.class</code>作为参数传递给<code>run</code>方法，从而让<code>SpringApplication</code>知道那个是Spring的基本组件。<code>args</code>数组同时也将命令行参数传递。</li>
<li>可以直接运行项目，并且访问8080端口即可看到输出。</li>
</ol>
</li>
<li><h5 id="创建一个可执行的Jar"><a href="#创建一个可执行的Jar" class="headerlink" title="创建一个可执行的Jar"></a>创建一个可执行的Jar</h5>​    通过创建一个可执行的独立的Jar文件，完成了实例。可执行Jar（有时也被称作“fat jars” 胖jar），是一个包含编译后的class文件和运行时依赖的jar的文档。<blockquote>
<p>可执行Jar和Java</p>
<p>​    Java并没有提供一种标准的方法,去载入嵌套的jar文件(jar文件被包含在一个jar文件内部).如果想要分发一个自包含的应用,可能会有问题.</p>
<p>​    去解决这个问题,许多开发者使用uber jar.一个uber jar把应用所需要的依赖的class文件打包进一个文档.这种方式的问题在于,去看当前应用程序中有哪些库变得很困难.同样,如果存在文件同名的情况,也会导致问题.</p>
</blockquote>
​    去创建一个可执行的jar,需要将<code>spring-boot-maven-plugin</code>添加到<code>pom.xml</code>中.需要再<code>dependency</code>后面添加如下部分.<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

​    调用mvn package命令 ,对程序进行打包.然后在<code>target</code>目录中,可以看到制作完成的jar包<code>myproject-0.0.1-SNAPSHOT.jar</code>.文件应该在10M左右.​    同时也可以看到一个小的多的文件,<code>myproject-0.0.1-SNAPSHOT.jar.original</code>.这个是maven打包的初始的jar,Spring Boot对这个进行再打包.​    运行程序,可以使用<code>java -jar</code>命令来运行打包后的应用.使用<code>ctrl -c</code>结束整个应用.</li>
</ol>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>第二篇,使用Spring Boot</title>
    <url>/posts/42178.html</url>
    <content><![CDATA[<h4 id="使用Spring-Boot"><a href="#使用Spring-Boot" class="headerlink" title="使用Spring Boot"></a>使用Spring Boot</h4><p>这个章节深入研究使用Spring Boot的更多细节.包含了主题有构建系统,自动配置,如何运行程序.也会包含一些使用Spring Boot的最佳实践.虽然Spring Boot没有什么特别特殊的地方(你可以假设这只是另外一个库),但是又仍有一些建议.如果遵循这些建议,可以开发过程更容易.</p>
<ol>
<li><h5 id="构建系统"><a href="#构建系统" class="headerlink" title="构建系统"></a>构建系统</h5>​    强烈建议选择一个支持依赖管理的构建系统.推荐使用支持Maven Central仓库的工具.推荐使用Maven和Grande.虽然其他的构建系统可以使用Spring Boot.<ol>
<li><h6 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h6>每一个Spring Boot的发布都会提供一份精心挑选的依赖.在实际构建配置工作中,不需要提供任何依赖的版本,Spring Boot管理已经做了管理.当升级Spring Boot是,这些依赖也会保持一致的升级.<br>note:如果有需要的话,也可以指定版本,覆盖Spring Boot的建议.<br>精选的列表包含所有的可以和Spring Boot一起使用的Spring模块,同时这个列表也是精选的第三方库.</li>
<li><h6 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h6>学习如何使用Spring Boot和Maven,可以参考下面网址.<br><a href="https://docs.spring.io/spring-boot/docs/2.5.0/maven-plugin/reference/htmlsingle/">https://docs.spring.io/spring-boot/docs/2.5.0/maven-plugin/reference/htmlsingle/</a></li>
<li><h6 id="Starters"><a href="#Starters" class="headerlink" title="Starters"></a>Starters</h6>​    Starters是一系列方便的依赖描述符,可以用在应用中.可以一站式解决所有Spring和相关技术栈的依赖,不需要翻遍样例代码,然后复制相关依赖描述符.比如,如果想要使用Spring和JPA,就可以直接包含<code>spring-boot-starter-data-jpa</code>.<br>​    starters包含了很多依赖,使用连续,支持一系列可传递的依赖可以被用来快速构建,运行项目.<blockquote>
<p>在starter的name</p>
<p>​    所有官方的starter都遵循类似的命名模式.<code>spring-boot-starter-*</code>,<code>*</code>是一种特定类型的程序.这种命名结构旨在方便使用者寻找需要的starter.在很多IDE中集成的Maven可以根据名称搜索依赖.</p>
<p>​    第三方的starters不应该以<code>spring-boot</code>,因为这是官方Spring Boot的artifacts.第三方的starter应该使用项目名开头.必须一个第三方的starter工程叫做<code>thirdpartyproject</code>,应该被命名为<code>thirdpartyproject-spring-boot-starter</code>.<br>下面的starter是Spring Boot提供的在<code>org.springframework.boot</code>组中:    </p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>spring-boot-starter</code></td>
<td>核心starter,包括自动配置支持,日志和YAML</td>
</tr>
<tr>
<td><code>spring-boot-starter-activemq</code></td>
<td>使用 Apache ActiveMQ的JMS消息的starter</td>
</tr>
<tr>
<td><code>spring-boot-starter-amqp</code></td>
<td>使用 Spring AMQP和Rabbit MQ的starter</td>
</tr>
<tr>
<td><code>spring-boot-starter-aop</code></td>
<td>使用SpringAOP和AspectJ的面向切面编程的starter</td>
</tr>
<tr>
<td><code>spring-boot-starter-artemis</code></td>
<td>使用 Apache Artemis的JMS消息的starter</td>
</tr>
<tr>
<td><code>spring-boot-starter-batch</code></td>
<td>使用Spring Batch的starter</td>
</tr>
<tr>
<td><code>spring-boot-starter-cache</code></td>
<td>支持Spring Framework的cache的starter</td>
</tr>
<tr>
<td><code>spring-boot-starter-data-cassandra</code></td>
<td>使用 Cassandra distributed database and Spring Data Cassandra的starter</td>
</tr>
</tbody></table>
</blockquote>
</li>
</ol>
</li>
<li><h5 id="组织代码"><a href="#组织代码" class="headerlink" title="组织代码"></a>组织代码</h5>Spring Boot不要求任何的特定代码格式.但是有一些是最好的实践方式.<ol>
<li><h6 id="使用”default”包"><a href="#使用”default”包" class="headerlink" title="使用”default”包"></a>使用”default”包</h6>​    当一个class没有包含<code>package</code>生命是,会被默认放在”default package”.不应该使用默认包的方式,应当尽量避免使用默认包.对于Spring Boot应用来说,在使用<code>@ComponentScan</code>,<code>@ConfigurationPropertiesScan</code>,<code>@entityScan</code>,<code>@SpringBootApplication</code>注解时,可能会导致一些问题,因为每个jar中的每个class都会被读取.<br>tip:推荐遵循Java推荐的包命名方式,使用倒置的域名(com.github….).</li>
<li><h6 id="主程序类的位置"><a href="#主程序类的位置" class="headerlink" title="主程序类的位置"></a>主程序类的位置</h6>​    推荐将主程序类放到包的根路径下,在其他所有的class上级.<code>@SpringBootApplication</code>注解经常放在main所在的类上,这隐式地定义了搜索特定项目的基础包.比如,当写一个JPA应用,<code>@SpringBootApplication</code>注解标注的类所在的包,将会被用来检索<code>@Entity</code>项目.使用包的根路径也可以用来扫描项目中的组件<br>​    tip:如果不想使用<code>@SpringBootApplication</code>,可以改用<code>@EnableAutoConfiguration</code>,<code>@ComponentScan</code>注解来定义导入行为.<br>下面是典型的代码结构:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com</span><br><span class="line"> +- example</span><br><span class="line">     +- myapplication</span><br><span class="line">         +- MyApplication.java</span><br><span class="line">         |</span><br><span class="line">         +- customer</span><br><span class="line">         |   +- Customer.java</span><br><span class="line">         |   +- CustomerController.java</span><br><span class="line">         |   +- CustomerService.java</span><br><span class="line">         |   +- CustomerRepository.java</span><br><span class="line">         |</span><br><span class="line">         +- order</span><br><span class="line">             +- Order.java</span><br><span class="line">             +- OrderController.java</span><br><span class="line">             +- OrderService.java</span><br><span class="line">             +- OrderRepository.java</span><br></pre></td></tr></table></figure>
<code>MyApplication.java</code>文件应该使用<code>@SpringBootApplication</code>来声明<code>main</code>方法:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><h6 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h6>​    Spring Boot支持使用基于Java的配置.尽管可以使用xml源来配置<code>SpringApplication</code>,仍然推荐使用主要配置源应该是一个<code>@Configuration</code>类.通常来说,使用定义<code>main</code>方法的类作为主要源是一个很好的选择.<br>​    tip:在网络上,发布了很多使用XML配置的例子.如果可以的话,应该尽量使用作用相同的基于Java类的配置方式.尝试搜索<code>Enable*</code>注解可能是一个好的开始.<ol>
<li>导入其他配置类<br>不需要将所有使用<code>@Configuration</code>的类融合成一个单独的类.可以使用<code>@Import</code>注解去导入其他配置类.同样,也可以使用<code>@ComponentScan</code>注解去自动导入是所有类,包括标有<code>@configuration</code>的类.</li>
<li>导入XML配置<br>如果必须要使用基于xml的配置方式,仍然推荐使用使用<code>@Configuration</code>类.在类上使用<code>@ImportResource</code>注解去导入XML配置文件.</li>
</ol>
</li>
<li><h6 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h6>​    Spring Boot自动配置尝试基于已经添加的jar依赖去自动配置应用.比如,<code>HSQLDB</code>在classpath中,并且没有手动配置任何关于数据库连接的Bean,Spring Boot会自动配置一个内存数据库.<br>​    可以在任意一个标有<code>@Configuration</code>的配置类上,添加<code>@EnableAutoConfiguration</code>注解或者<code>@SpringBootApplication</code>注解来启用自动配置.<br>​    tip: 应该只添加一个<code>@SpringBootApplication</code>或者<code>@EnableAutoConfiguration</code>注解,推荐添加其中一个到主要的配置类上.<ol>
<li>逐渐替换自动配置<br>​    自动配置是非侵入的.在任何时候,都可以开始定义自己的配置,去替换自动配置的特定部分.比如,如果增加了自己的<code>DataSource</code>Bean,默认的内置数据库的支持会被替换.<br>​    如果想要知道有些自动配置正在被使用,并且使用的原因是是什么,可以使用<code>--debug</code>模,切换到debug模式.会在控制台输出相关信息.</li>
<li>指定不使用自动配置的类,<br>​    如果希望对指定的类,不使用自动配置.可以使用<code>@SpringBootApplication</code>的exclude属性去禁用自动配置.如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123; DataSourceAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
​    如果类没有在classpath中,可以使用注解的<code>excludeName</code>属性来指定类的全路径名. 如果使用的是<code>@EnableAutoConfiguration</code>而不是<code>@SpringApplication</code>,<code>exclude</code>和<code>excludeName</code>同样可以使用. 最后,还可以使用<code>spring.autoconfigure.exclude</code>属性来指定不需要自动配置的类.<br>​    tip:可以同时在注解和配置文件中指定不要自动注解类<br>​    note: 尽管自动配置类是public的,该类的唯一被认为是公共API的方面是可用于禁用自动配置的类的名称。这些类的实际内容（例如嵌套配置类或Bean方法）仅供内部使用，我们不建议直接使用它们。(不要直接使用配置类的内部配置)</li>
</ol>
</li>
<li><h6 id="Spring-Bean和依赖注入"><a href="#Spring-Bean和依赖注入" class="headerlink" title="Spring Bean和依赖注入"></a>Spring Bean和依赖注入</h6>​    可以选择任何一种Spring提供的定义beans和注入依赖的方式.通常建议使用<em><strong>构造器注入</strong></em>的方式去织入依赖和使用<code>@ComponentScan</code>去发现bean.<br>​    如果和上面提到的代码组织方式一致(将主程序类放到最上层包中),可以使用不含参数的<code>@ComponentScan</code>注解,或者使用<code>@SpringApplication</code>注解,该注解已经隐式地包含<code>@ComponentScan</code>. 程序的所有组件(<code>@Component</code>,<code>@Service</code>,<code>@Repository</code>,<code>@Controller</code> etc)都会自动注册为Spring Bean.<br>​    下面的例子展示的是,<code>@Service</code>Bean使用构造器注入,构造器包含一个<code>RiskAssessor</code>Bean作为参数:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccountService</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RiskAssessor riskAssessor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAccountService</span><span class="params">(RiskAssessor riskAssessor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.riskAssessor = riskAssessor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
如果bean有多个构造器,需要使用<code>@AutoWired</code>指定使用哪一个构造器进行构造注入.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccountService</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RiskAssessor riskAssessor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PrintStream out;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAccountService</span><span class="params">(RiskAssessor riskAssessor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.riskAssessor = riskAssessor;</span><br><span class="line">        <span class="keyword">this</span>.out = System.out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAccountService</span><span class="params">(RiskAssessor riskAssessor, PrintStream out)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.riskAssessor = riskAssessor;</span><br><span class="line">        <span class="keyword">this</span>.out = out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><h6 id="使用-SpringBootApplication注解"><a href="#使用-SpringBootApplication注解" class="headerlink" title="使用@SpringBootApplication注解"></a>使用<code>@SpringBootApplication</code>注解</h6>​    很多开发者希望在程序中使用自动配置,组件扫描,并且定义额外配置.只需要一个<code>@SpringApplication</code>注解就可以实现三个功能:<ul>
<li><code>@EnableAutoConfiguration</code>,开启自动配置机制</li>
<li><code>@ComponentScan</code>:开启扫描包</li>
<li><code>@Configuration</code>:允许在context中注册额外bean或者导入额外配置类.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">// same as @Configuration @EnableAutoConfiguration @ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
note: 这些特性不是强制的,可以选择这些特性的注解去替换掉<code>@SpringBootApplication</code>注解.比如,如果不想使用component scan或者配置属性的.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@Import(&#123; SomeConfiguration.class, AnotherConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在这个例子中,application就像其他任何一个Spring Boot应用程序,除了<code>@Component</code>注解标注的类和<code>@ConfigurationProperties</code>注解标注的类不是自动检测的,还有用户自定义的bean被显式导入之外,并没有什么不同.</li>
<li><h6 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h6>​    将程序打包成jar并且使用嵌入的HTTP server的一个最大的优点,就是可以像运行其他应用程序一样运行应用程序。同样也适用于调试Spring  Boot程序.不需要任何IDE的插件或者扩展.<ol>
<li>从IDE运行<br>将项目导入到IDE中,直接运行.</li>
<li>以运行打包程序方式运行<br>如果使用Maven创建可执行Jar,则可以直接使用<code>java -jar</code> 运行.</li>
<li>使用Maven插件<br>直接使用 mvn 执行 run goal.<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn spring-boot:run</span><br></pre></td></tr></table></figure></li>
<li>热部署形式运行</li>
</ol>
</li>
<li><h6 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h6>​    Spring Boot包含一些额外的开发工具集,可以让开发更加方便.<code>spring-boot-devtools</code>可以被放在任何工程中,以提供开发过程中的功能.添加依赖到Maven中:<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
注意:<br>​    当运行整个打包后程序时,发者工具会自动禁用.如果程序是从<code>java -jar</code>方式运行或者是从特殊的类加载器加载是,会被当做是生产环境应用.可以通过使用<code>spring.devtools.restart.enabled</code>系统变量,来控制行为.如果无论什么类加载器,都启用开发工具,设置系统变量<code>-Dspring.devtools.restart.enabled=true</code>.绝对不能在运行devtools有安全风险的生产环境中执行此操作.禁用开发工具,排查相关依赖或者设置系统变量<code>-Dspring.devtools.restart.enabled=false</code>.<br>提示:在maven中,将依赖设为optional,从而禁止devtools的传递性.<ol>
<li><h6 id="默认属性"><a href="#默认属性" class="headerlink" title="默认属性"></a>默认属性</h6>​    Spring Boot支持的几个库使用缓存来提升性能.比如,template引擎缓存编译后的模板,来避免对模板文件的重复解析.同样的,Spring MVC可以在为静态资源提供服务时将HTTP缓存header添加到响应中。<br>​    虽然缓存在生产环境中有很多好处, 但是在开发过程中, 可能会适得其反,可能会让开发者无法看到刚发布的程序的变化. 出于这个原因,spring-boot-devtools 默认引用缓存项.<br>​    缓存选项通常在<code>application.properties</code>中配置.比如Thymeleaf 提供<code>spring.thymeleaf.cache</code>属性. 不需要手动配置这些属性, <code>spring-boot-devtools</code> 自动设置一些在开发阶段的合理的配置.<br>​    在开发Spring MVC和Spring WebFlux应用时,开发者需要很多关于请求的信息, 开发者工具会自动开启网络部分的<code>DEBUG</code>日志. 这能够提供更多关于请求的信息, 那个handler正在处理, 响应的结果等等. 如果想要日志输出所有的细节(包括潜在敏感信息), 可以开启<code>spring.mvc.log-request-details</code> 或者 <code>spring.codec.log-request-details</code> 配置项.<blockquote>
<p>注意:</p>
<p>如果不想使用默认的开发者工具属性,可以在<code>application.properties</code>中配置关闭:<code>spring.devtools.add-properties = false</code></p>
</blockquote>
</li>
<li><h6 id="自动重启"><a href="#自动重启" class="headerlink" title="自动重启"></a>自动重启</h6>​    当编译路径中的文件发生改变时, 使用<code>spring-boot-devtools</code>的应用会自动重启. 在IDE中,这是个特性很有用, 可以对代码更改给出快速反应. 默认情况下, classpath目录被监视改变. 需要注意, 特定的资源,比如静态资源和视图模板,不需要改变.<blockquote>
<p>触发重启.</p>
<p>DevTools监视编译路径资源,能够触发重启的唯一方式是编译路径内的更新. 对编译路径下的更新主要取决于使用哪种编译器:</p>
<ul>
<li>推荐打开项目的自动编译属性.<br>注意:</li>
</ul>
<p>如果使用Maven的build插件来实现重启,则必须让<code>forking</code>开启状态.</p>
<p>提示:</p>
<p>​    自动重启能和LiveReload良好的协作. 如果使用JRebel,自动重启会禁用, 以支持动态class的载入.其他的devtools的功能(比如LiveReload和覆盖属性)正常使用</p>
<p>注意:</p>
<p>​    在重启中, DevTools依赖应用上下文环境的钩子函数来关闭.如果金融了shutdown hook, 可能导致不能够正常工作(<code>SpringApplication.setRegisterShutdownHook(false)</code>)</p>
<p>注意:</p>
<p>​    DevTools需要自定义<code>ApplicationContext</code>中的<code>ResourceLoader</code>. 如果应用中已经提供了一个, 会被包装. 在<code>ApplicationContext</code>中直接重写<code>getResource</code>方法不会被支持.<br>Restart vs Reload</p>
<p>​    Spring Boot提供两个classloader来实现restart. 不会改变的类(比如来自第三方的jar)会被加载到叫<code>base</code>的classloader中. 正在开发过程的class会被加载到叫<code>restart</code>的classloader中. 当应用被重启, <code>restart</code>classloader被丢弃, 会重新创建一个. 这种方式意味着, 应用程序通常可以比冷启动快很多, 因为<code>base</code>classloader已经可用并已填充.</p>
<p>​    如果发现重启不够快,或者遇到classloading问题,可以考虑reloading technology, 比如ZeroTurnaround的JRebel. 这些方法通过在加载类时重写类来使它们更适合于重新加载。</p>
</blockquote>
<ol>
<li>记录条件评估中的更改<br>​    默认情况下, 每次应用程序重新启动时，都会记录一个报告，其中显示了条件评估增量。报告显示了应用的自动配置的更改, 比如增加或者移除了bean还有对配置属性的更改.可以关闭报告日志:<code>spring.devtools.restart.log-condition-evaluation-delta=false</code></li>
<li>排除资源<br>​    有些资源改变时, 不需要触发重启. 比如Thymeleaf templates可以就地编辑. 默认情况下, 改变一下目录下的资源时,不会触发重启但是会触发热加载(live reload):<code>/META-INF/maven</code>, <code>/META-INF/resources</code>, <code>/resources</code>, <code>/static</code>, <code>/public</code>, <code>/templates</code>.如果想要自定义排除规则, 可以使用<code>spring.devtools.restart.exclude</code>属性. 比如只想排除<code>/static</code>,<code>/public</code>,可以如下配置:<code>spring.devtools.restart.exclude=static/**,public/**</code><blockquote>
<p>提示:</p>
<p>​    如果想要保持默认配置,并且想增加新的排除规则,可以使用<code>spring.devtools.restart.additional-exclude</code>属性.</p>
</blockquote>
</li>
<li>监视其他路径<br>​    如果想要应用根据其他目录比如不是classpath, 而重启或者重新加载.可以使用<code>spring.devtools.restart.additional-paths</code> 属性来配置其他监视路径.可以使用前面所述的<code>spring.devtools.restart.exclude</code>属性来控制其他路径下的更改是触发完全重启还是实时重新加载。</li>
<li>关闭重启<br>​    如果不想要使用重启功能,可以使用<code>spring.devtools.restart.enabled</code>关闭. 在多数情况下,可以在<code>application.properties</code>. (即使关闭, 也会初始化<code>restart</code> classloader,但是不会监视文件更改).<br>​    如果想要完全关闭重启功能(比如,该功能和其他库发生冲突时),可以在调用<code>SpringApplication.run(…)</code>前,将<code>System</code>的<code>spring.devtools.restart.enabled</code>设置为<code>false</code>.如下:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;spring.devtools.restart.enabled&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用触发文件<br>​    如果使用的IDE不断编译文件,可能只需要在特定的几次触发重启.这种情况下,可以使用触发文件,这种方式是修改特定的文件来触发重启.<blockquote>
<p>注意:</p>
<p>​    对文件的任何更新都会触发检查，但是只有在Devtools检测到有事情要做的情况下，重启才会真正发生。<br>​    使用触发文件, 设置<code>spring.devtools.restart.trigger-file</code>为文件名(不包含任何路径). 文件必须实在classpath中.<br>比如,项目结构如下:</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">+- main</span><br><span class="line">   +- resources</span><br><span class="line">      +- .reloadtrigger</span><br></pre></td></tr></table></figure>
<code>trigger-file</code>的配置应该是<code>spring.devtools.restart.trigger-file=.reloadtrigger</code>.<br>当<code>src/main/resources/.reloadtrigger</code>文件更新时,将会重启.</li>
<li>自定义重启类加载器<br>​    正如前面所说, 重启功能是通过使用两个类加载器.在大多数应用中, 可以 很好工作.但是有时也会导致classloading问题.<br>​    默认情况下, IDE打开的工程会使用<code>restart</code>classloader来载入, 任何<code>.jar</code>文件会使用<code>base</code>classloader载入.如果在一个多模块工程中,每个模块都导入到IDE中, 需要做一些自定义的工作.创建<code>META-INF/spring-devtools.properties</code>文件.<br>​    <code>spring-devtools.properties</code>文件包含以<code>restart.exclude</code>和<code>restart.include</code>属性. <code>include</code>标签中的元素会放进<code>restart</code>classloader,并且<code>exclude</code>标签中的元素会被放进<code>base</code>classloader中. 属性值是正则表达式,被应用到class中.如下所示:<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">restart.exclude.companycommonlibs</span>=<span class="string">/mycorp-common-[\\w\\d-\\.]+\\.jar</span></span><br><span class="line"><span class="meta">restart.include.projectcommon</span>=<span class="string">/mycorp-myproj-[\\w\\d-\\.]+\\.jar</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:</p>
<p>所有的属性key都必须不同.只要以<code>restart.include.</code>或者<code>restart.exclude.</code></p>
<p>建议:</p>
<p>​    所有来自classpath的<code>META-INF/spring-devtools.properties</code>的属性都会被载入.可以将文件打包到项目中,或者打包到项目需要的库中.</p>
</blockquote>
</li>
<li>已知的局限性<br>​    重启功能不能和通过使用<code>ObjectInputStream</code>来反序列的对象良好工作.如果需要反序列化数据,需要使用Spring的<code>ConfigurableObjectInputStream</code>和<code>Thread.currentThread().getContextClassLoader()</code>的组合.<br>​    很多第三方库反序列化没有考虑到context loader.</li>
</ol>
</li>
<li><h6 id="LiveReload"><a href="#LiveReload" class="headerlink" title="LiveReload"></a>LiveReload</h6>​    <code>spring-boot-devtools</code>内置了 LiveReload server, 当资源更新时,可以用来触发浏览器刷新.对于多种浏览器有很好的支持.<br>​    如果不想开启LiveReload server ,可以配置属<code>spring.devtools.livereload.enabled</code>为<code>false</code><blockquote>
<p>注意:</p>
<p>​    一次只能够运行一个LiveReload server.在运行程序前,应该保证没有其他的LiveReload server 在运行.如果在IDE中运行多个应用, 则只有第一个应用程序有LiveReload 支持.</p>
<p>警告:</p>
<p>​    当文件发生改变时, 为了触发LiveReload ,自动重启功能必须开启.</p>
</blockquote>
</li>
<li><h6 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h6>​    可以配置devtools的全局配置.在<code>$HOME/.config/spring-boot</code>下添加如下任一一个配置文件:<ol>
<li><code>spring-boot-devtools.properties</code></li>
<li><code>spring-boot-devtools.yaml</code></li>
<li><code>spring-boot-devtools.yml</code><br>这些文件中任一一个属性都会被应用到使用devtools的Spring Boot应用中. 比如, 配置总是使用一个trigger file来触发重启, 可以把下面的配置添加到<code>spring-boot-devtools</code>文件中.<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.devtools.restart.trigger-file</span>=<span class="string">.reloadtrigger</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:</p>
<p>​    如果在<code>$HOME/.config/spring-boot</code>目录下没有任何devtools的配置文件, 将会在<code>$HOME</code>目录中,搜索一个叫<code>.spring-boot-devtools.properties</code>文件. 通过这种方式, 可以将devtools的全局配置分享到一个不支持<code>$HOME/.config/spring-boot</code>的老版本Spring Boot上.</p>
<p>注意:</p>
<p>​    在devtools的properties/yaml配置文件中,不支持Profiles.</p>
<p>​    在<code>.spring-boot-devtools.properties</code>配置profiles不会影响到指定的profiel配置文件的加载.  在YAML和properties配置文件中, 不支持配置profile文件名(<code>spring-boot-devtools-&lt;profile&gt;.properties</code>和<code>spring.config.activate.on-profile</code>都不支持)</p>
</blockquote>
</li>
<li>配置文件系统监视器<br>​    <code>FileSystemWatcher</code>的工作原理是, 通过一个特定时间的轮询class的变化,然后等待先前定义好的时间来保证没有其他更多的变化. 因为Spring Boot基本上都是依赖IDE去编译并且把编译好的文件拷贝到Spring Boot可以读取的目录, 在实际的使用过程中, 可能会发现,当devtools重启应用时, 有的对代码的改动反映到应用中. 如果这个问题不断出现, 可以尝试提高<code>spring.devtools.restart.poll-interval</code>和<code>spring.devtools.restart.quiet-period</code>参数值来适应当前的开发环境.<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.devtools.restart.poll-interval</span>=<span class="string">2s</span></span><br><span class="line"><span class="meta">spring.devtools.restart.quiet-period</span>=<span class="string">1s</span></span><br></pre></td></tr></table></figure>
​    被监视的classpath路径,每隔2s会被监视一次变化, 并且经过1s的等待,来保证class没有其他改动.</li>
</ol>
</li>
<li><h6 id="远程应用"><a href="#远程应用" class="headerlink" title="远程应用"></a>远程应用</h6>​    Spring Boot的devtools并不被限制在本地开发, 当运行远程应用是,可以使用其中几项功能. 使用远程支持可能会带来一些安全风险问题. 只有在安全可信任的网络上,或者启动SSL来保障安全的网络上,启用这项功能. 如果上面的两个选项都没有, 那就不应该使用devtools提供的远程支持. 在生产部署的时候,也不应该开启该功能.<br>​    开启这个功能,要保证<code>devtools</code>包含在重新打包的文档中.如下所示.<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludeDevtools</span>&gt;</span>false<span class="tag">&lt;/<span class="name">excludeDevtools</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
​    还需要设置<code>spring.devtools.remote.secret</code>属性. 应该像重视重要的密码那样重视, 属性值应该唯一且强壮,不应该被轻易猜到或者暴力破解.<br>​    远程devtools支持由两部分支持:接受连接的server端和运行在IDE中的client. 当设置<code>spring.devtools.remote.secret</code>属性时, server端的组件会自动开启. 客户端组件只能手动启动.<ol>
<li>运行远程客户端应用<br>​    远程客户端应用由IDE启动, 需要使用与连接到的远程项目相同的类路径来运行<code>org.springframework.boot.devtools.RemoteSpringApplication</code>.  该应用程序的唯一必需参数是它连接到的远程URL。<br>​    比如,如果使用Eclipse或者 Spring Tools, 并且有一个工程叫做<code>my-app</code>应将部署在云上,可以做一下操作:<ul>
<li>选择在<code>Run</code>菜单中选择<code>Run Configurations…</code></li>
<li>创建一个<code>Java Application</code>d的启动配置</li>
<li>浏览<code>my-app</code>工程</li>
<li>把<code>org.springframework.boot.devtools.RemoteSpringApplication</code>当做main类来使用.</li>
<li>添加<code>https://myapp.cfapps.io</code>(远程url)到<code>Program arguments</code>中.<br>启动后如下:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> .   ____          _                                              __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _          ___               _      \ \ \ \</span><br><span class="line">( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` |        | _ \___ _ __  ___| |_ ___ \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| []::::::[]   / -_) &#x27;  \/ _ \  _/ -_) ) ) ) )</span><br><span class="line">  &#x27;  |____| .__|_| |_|_| |_\__, |        |_|_\___|_|_|_\___/\__\___|/ / / /</span><br><span class="line"> =========|_|==============|___/===================================/_/_/_/</span><br><span class="line"> :: Spring Boot Remote :: 2.5.0</span><br><span class="line"></span><br><span class="line">2015-06-10 18:25:06.632  INFO 14938 --- [           main] o.s.b.devtools.RemoteSpringApplication   : Starting RemoteSpringApplication on pwmbp with PID 14938 (/Users/pwebb/projects/spring-boot/code/spring-boot-project/spring-boot-devtools/target/classes started by pwebb in /Users/pwebb/projects/spring-boot/code)</span><br><span class="line">2015-06-10 18:25:06.671  INFO 14938 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@2a17b7b6: startup date [Wed Jun 10 18:25:06 PDT 2015]; root of context hierarchy</span><br><span class="line">2015-06-10 18:25:07.043  WARN 14938 --- [           main] o.s.b.d.r.c.RemoteClientConfiguration    : The connection to http://localhost:8080 is insecure. You should use a URL starting with &#x27;https://&#x27;.</span><br><span class="line">2015-06-10 18:25:07.074  INFO 14938 --- [           main] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729</span><br><span class="line">2015-06-10 18:25:07.130  INFO 14938 --- [           main] o.s.b.devtools.RemoteSpringApplication   : Started RemoteSpringApplication in 0.74 seconds (JVM running for 1.105)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:</p>
<p>​    因为远程客户端使用和实际应用一样的classpath,所以它可以直接读取应用配置文件. 这就是<code>spring.devtools.remote.secret</code>被读取和传递到服务端进行验证的方式.</p>
<p>建议:    </p>
<p>​    建议使用<code>https://</code>作为连接协议,  连接被加密并且密码不会被拦截.</p>
<p>建议:</p>
<p>    如果使用代理连接远程应用.可以配置<code>spring.devtools.remote.proxy.host</code>和<code>spring.devtools.remote.proxy.port</code>属性.</p>
</blockquote>
</li>
</ul>
</li>
<li>远程更新<br>​    远程客户端监视应用的classpath的变化,这个本地启动的方式一样. 任何资源的更新都会被推送到远程应用,并且会触发重启(如果设置的话). 这个功能有时候会很有帮助, 比如迭代一个使用云服务的功能,但是本地没有. 通常来说, 远程更新和重启会比本地全部重新编译部署要快很多.<br>​    在一个很慢的开发环境中, 可能会出现quiet时间太短, 导致对class的更改被分割成了好几批. 在第一批更改上传之后, 服务端被重启.第二批更改不能够发送给服务端, 因为服务端正在重启.<br>​    这通常通过RemoteSpringApplication日志中的警告来，即有关上传某些类失败的消息，并随后重试. 但是这也可能会导致代码的不一致性,可能会导致在第一批更改上传之后, 应用重启失败. 如果不断遇到这些问题,可以尝试增加<code>spring.devtools.restart.poll-interval</code>和<code>spring.devtools.restart.quiet-period</code>的参数值以适应当前的开发环境.<blockquote>
<p>注意:</p>
<p>​    只有当远程客户端启动了,文件才会被监视.如果在启动远程客户端之前改变了文件, 那么文件不会被推送到远程服务器上.</p>
</blockquote>
</li>
</ol>
</li>
<li><h6 id="打包生产环境应用"><a href="#打包生产环境应用" class="headerlink" title="打包生产环境应用"></a>打包生产环境应用</h6>​    可执行Jar一般用在部署生产环境中.因为他们是独立的, 所以非常适合部署在云上.<br>​    其他的适合生产环境的功能,比如运行状况,审核,度量REST或者JMX端点,可以考虑使用<code>spring-boot-actuator</code>.</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
</search>
