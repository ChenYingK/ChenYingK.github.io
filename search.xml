<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Maven</title>
    <url>/2021/05/23/Maven/</url>
    <content><![CDATA[<h4 id="Maven入门"><a href="#Maven入门" class="headerlink" title="Maven入门"></a>Maven入门</h4><p>maven是Java平台上的自动化构建工具</p>
<ul>
<li>关于构建的各个环节<ol>
<li>清理：将之前编译得到的旧的class字节码文件删除，为下一次编译做准备。</li>
<li>编译：将Java源代码编译成class字节码。</li>
<li>测试：自动测试，自动调用junit程序。</li>
<li>报告：测试程序执行的结果。</li>
<li>打包：动态Web工程打war包，Java工程打jar包。</li>
<li>安装：Maven特定的概念——将打包得到文件复制到“仓库”中指定的位置。</li>
<li>部署：将动态Web工程生成的war包复制到Servlet容器的指定目录下，使其可以运行。</li>
</ol>
</li>
</ul>
<ol>
<li>创建约定的目录结构<ol>
<li>根目录：工程名</li>
<li>src目录：源码</li>
<li>pom.xml文件：Maven核心配置文件</li>
<li>main目录：存放程序</li>
<li>test目录：存放测试程序</li>
<li>java目录：存放java源文件</li>
<li>resources目录：存放框架或者其他工具的配置文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my-app</span><br><span class="line">|-- pom.xml</span><br><span class="line">`-- src</span><br><span class="line">    |-- main</span><br><span class="line">    |   |-- java</span><br><span class="line">    |   |   `-- com</span><br><span class="line">    |   |       `-- mycompany</span><br><span class="line">    |   |           `-- app</span><br><span class="line">    |   |               `-- App.java</span><br><span class="line">    |   `-- resources</span><br><span class="line">    |       `-- META-INF</span><br><span class="line">    |           `-- application.properties</span><br><span class="line">    `-- test</span><br><span class="line">        `-- java</span><br><span class="line">            `-- com</span><br><span class="line">                `-- mycompany</span><br><span class="line">                    `-- app</span><br><span class="line">                        `-- AppTest.java</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>为什么要遵守约定的目录结构？<ol>
<li>Maven负责这个项目的自动化构建，以编译为例，Maven要想自动编译，那么它必须知道Java源文件保存在哪里。</li>
<li>如果自己定义的东西想要让框架或者工具知道，有两种办法：<ol>
<li>以配置的方式明确告诉框架。</li>
<li>遵循框架内部已经存在的约定。<br>比如log4j.xml</li>
<li>约定&gt;配置&gt;编码。</li>
</ol>
</li>
</ol>
</li>
<li>常用Maven命令<ol>
<li>注意：执行与构建过程相关的Maven命令，必须进入pom.xml所在的目录。<br>与构建过程相关的操作：编译、测试、打包。。。</li>
<li>常用命令<ol>
<li>mvn clean：清理。</li>
<li>mvn compile ：编译主程序。</li>
<li>mvn test-compile：编译测试程序。</li>
<li>mvn test：执行测试。</li>
<li>mvn package：打包。</li>
</ol>
</li>
<li>关于联网问题<ol>
<li>Maven的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须由特定的插件来完成。而插件本身并不包含在Maven的核心程序中。</li>
<li>当执行Maven命令需要用到某些插件是，Maven核心程序会首先到本地仓库中查找。</li>
<li>Maven核心程序如果在本地仓库中找不到需要的插件，那么会自动连接外网，到中央仓库中下载。</li>
</ol>
</li>
</ol>
</li>
<li>POM<ol>
<li>含义（Project Object Model）项目对象模型。类似于DOM Docment Object Model文档对象模型。</li>
<li>pom.xml对于Maven工程是核心配置文件，与构建过程相关的一切设置都在这个文件中进行配置。</li>
<li>坐标<ol>
<li>数学中的坐标<ol>
<li>平面上，使用X、Y两个向量可以唯一确定平面中的任何一个点。</li>
<li>在空间中，使用X、Y、Z三个向量可以唯一定位空间中的任何一个点。</li>
</ol>
</li>
<li>Maven的坐标<br>使用下面三个向量可以在仓库中唯一定位一个Maven工程<ol>
<li>groupId：公司或者组织域名倒序+项目名<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupid</span>&gt;</span>com.proton.projectname<span class="tag">&lt;/<span class="name">groupid</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>artifactId：模块名<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>modulename<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>version：版本<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>Maven工程的坐标与仓库中路径的对应关系<ol>
<li>坐标<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>路径<br>命名规则：参照坐标<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">\repository\org\mybatis\mybatis\3.5.7\mybatis-3.5.7.jar</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li>仓库：<ol>
<li>分类：<ol>
<li>本地仓库：当前电脑上部署的仓库目录，为当前电脑上所有Maven工程服务。</li>
<li>远程仓库：<ol>
<li>私服：搭建在局域网中，为局域网范围内的所有Maven工程服务。</li>
<li>中央仓库：架设在Internet上，为世界所有Maven工程服务。</li>
<li>中央仓库镜像：为了分担中央仓库的流量，提升用户访问速度。</li>
</ol>
</li>
</ol>
</li>
<li>仓库中保存的内容：Maven工程<ol>
<li>Mavne自身所需要的插件</li>
<li>第三方框架或者工具的jar包</li>
<li>自己开发的Maven工程。</li>
</ol>
</li>
</ol>
</li>
<li>依赖(dependency)<ol>
<li>Maven解析依赖信息时会到本地仓库中查找被依赖的jar包<br>对于我们自己开发的maven工程，使用 mvn install命令安装后就可以进入仓库。</li>
<li>依赖的范围<ol>
<li>compile<br>compile描述的是jar包在编译阶段是否可用，是否参与到编译中。主程序可以使用范围为compile的依赖。测试程序也可以使用，并且会被打包到最终的包中。<ol>
<li>对主程序是否有效：有效</li>
<li>对测试程序是否有效：有效</li>
<li>是否参与打包：参与</li>
<li>典型例子：spring-core</li>
</ol>
</li>
<li>test<br>依赖范围为test依赖，对主程序而不可用，主要用于在测试环境中提供给测试程序测试支持。也不会参与到最终的打包。<ol>
<li>对主程序是否有效：无效</li>
<li>对测试程序是否有效：有效</li>
<li>是否参与打包：不参与</li>
<li>典型例子：junit</li>
<li><img src="/.%5CMaven.assets%5Cscope-compile-test.png" alt="image-20210522120546311"></li>
</ol>
</li>
<li>provided<br>描述的是开发阶段。在开发阶段，需要使用一些运行环境的jar包，如果缺少这部分jar包，则开发时编译器报错，而这部分jar包不需要在打包在程序中，在运行环境中会提供，比如tomcat的servlet-api.jar。provided属性标记的jar包，会在开发阶段提供给调用，在部署阶段会被忽略，在运行时，由运行环境中提供。<ol>
<li>对主程序是否有效：有效</li>
<li>对测试程序是否有效：有效</li>
<li>是否参与打包：不参与</li>
<li>是否参与部署：不参与</li>
<li>典型例子：servlet-api.jar<br><img src="/.%5CMaven.assets%5Cprovided.png" alt="image-20210522120048328"></li>
</ol>
</li>
</ol>
</li>
<li>依赖的传递性。在pom直接添加的dependency是直接依赖。如果添加的dependency还有其他依赖，则其他依赖被称作传递过来的依赖。<ol>
<li>依赖传递性的好处：可以传递的依赖不必再每个模块工程中都重复声明，只要在最底层的依赖中即可。</li>
<li>注意事项：依赖传递性仅限于compile范围，非compile范围的依赖不能传递。所以在各个模块工程中，针对test或者provided依赖范围，如果需要就得重复声明依赖。</li>
</ol>
</li>
<li>排除依赖：<br>当前工程有个直接依赖A，但是A也有个依赖B，此时如果不希望将B引入到当前工程中，可以对直接依赖的子依赖进行排除。<ol>
<li>依赖排除的场合：<br>当依赖中A存在着不稳定的依赖B，比如spring-core（A）中引入了一个不稳定的依赖common-log（B）。且不希望将不稳定的依赖（B）加入当前项目，则可以将不稳定的部分排除。</li>
<li>配置方式<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.ykproton<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">			排除依赖，</span></span><br><span class="line"><span class="comment">			排除过后，被排除的依赖传递性停止，不会继续向上传递</span></span><br><span class="line"><span class="comment"> 		--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>依赖冲突时选择原则<br>​    用于解决多个依赖，同时依赖的jar包的冲突。<ol>
<li><p>路径最短者优先原则。<br>如果A依赖B，B依赖C。C使用D的v1版本，B使用D的v2版本。根据路径最短，D-v1距离A最近。此时真正会使用的是D的v1版本。<br><img src="/.%5CMaven.assets%5Cimage-20210522141414168.png" alt="image-20210522120546311"></p>
</li>
<li><p>路径相同时，先声明者优先。先后顺序指的是dependency标签的顺序。<br><img src="/.%5CMaven.assets%5Cimage-20210522141527255.png" alt="image-20210522120546311"></p>
</li>
</ol>
</li>
<li>统一管理依赖版本<br>工程有很多依赖，如果升级依赖，手动修改每一个依赖的版本，容易出现错误，比如漏改错改。<br>可以使用properties标签内，使用自定义标签统一声明版本号。在使用同一版本的位置，引用自定义标签。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- properties标签可以配置多种属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- myApp.spring.version 为自定义标签 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">myApp.spring.version</span>&gt;</span></span><br><span class="line">    4.2.2.RELEASE</span><br><span class="line">  <span class="tag">&lt;/<span class="name">myApp.spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引用自定义标签，$&#123;标签名&#125; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;helloCaller.spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>生命周期<ol>
<li>各个构建环节执行的顺序：不能打乱顺序，必须按照既定的正确顺序执行。</li>
<li>Maven的核心应用程序定义了抽象的生命周期，生命周期中各个阶段的具体任务是由插件来完成的。</li>
<li>Maven核心程序为了更好实现自动化构建，按照这一特点执行生命周期中的各个阶段：无论现在要执行生命周期的哪一个阶段，都是从这个生命周期最初的位置开始执行。</li>
<li>插件和目标：<ol>
<li>生命周期各个阶段仅仅定义了要执行什么任务。</li>
<li>各个阶段和插件的目标是对应的。</li>
<li>相似的目标由特定的插件来完成。<table>
<thead>
<tr>
<th>生命周期阶段</th>
<th>插件目标</th>
<th>插件</th>
</tr>
</thead>
<tbody><tr>
<td>compile</td>
<td>compile</td>
<td>maven-compiler-plugin</td>
</tr>
<tr>
<td>test-compile</td>
<td>testCompile</td>
<td>maven-compiler-plugin</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
</ol>
</li>
<li>继承<br>　多个子项目都需要某些依赖, 就可以把子项目共同的依赖抽取到父项目中, 子项目通过继承得到这些依赖, 这样也更好的来管理(比如升级, 删除等)。也能解决因为范围为test、provided的依赖不能传递，导致的环境不一致的问题。<br>步骤：<ol>
<li>父项目打包方式修改为pom。<br>可以在父工程中，统一管理项目版本号。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.ykproton<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 此处为pom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     		......</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在子工程中声明对父工程的引用<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.ykproton<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>聚合<br>Java项目，往往是多个模块组成，聚合就是将多个模块整合在一起构建。快速构建<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>account<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>聚合的两种结构<ol>
<li>父子结构<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">|-- my-module1</span><br><span class="line">|   `-- pom.xml</span><br><span class="line">|-- my-module2</span><br><span class="line">|   `-- pom.xml</span><br><span class="line">`-- pom.xml</span><br></pre></td></tr></table></figure>
直接指定子项目名即可。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>my-module1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>my-module2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>同级结构<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">|-- my-module1</span><br><span class="line">|   `-- pom.xml</span><br><span class="line">|-- my-module2</span><br><span class="line"> |   `-- pom.xml</span><br><span class="line"> `-- parent</span><br><span class="line">     `-- pom.xml</span><br></pre></td></tr></table></figure>
通过相对路径，进行聚合。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../my-module1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../my-module2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇, 第一个Spring Boot工程</title>
    <url>/2021/05/24/%E4%B8%AASpring-Boot%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h4><h4 id="开发第一个SpringBoot工程"><a href="#开发第一个SpringBoot工程" class="headerlink" title="开发第一个SpringBoot工程"></a>开发第一个SpringBoot工程</h4><ol>
<li><h5 id="创建maven工程，添加依赖"><a href="#创建maven工程，添加依赖" class="headerlink" title="创建maven工程，添加依赖"></a>创建maven工程，添加依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><h5 id="添加classpath依赖"><a href="#添加classpath依赖" class="headerlink" title="添加classpath依赖"></a>添加classpath依赖</h5>Spring Boot提供了很多的Starter，可以把需要的jar添加到classpath中。<code>spring-boot-starter-parent  </code>是一个特殊的starter，它提供了很多有用的默认配置。但是它不会添加任何依赖。<br>当需要开发指定类型的程序，可以使用其他的starters。因为要开发的是一个web应用，所以需要添加一个<code>spring-boot-starter-web  </code>依赖。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><h5 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h5>maven的源代码路径在<code>src/main/java</code>,创建如下java文件<code>src/main/java/MyApplication.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><h6 id="RestController与-RequestMapping注解"><a href="#RestController与-RequestMapping注解" class="headerlink" title="@RestController与@RequestMapping注解"></a><code>@RestController</code>与<code>@RequestMapping</code>注解</h6>​    <code>@RestController</code>是一种模式注解（stereotype annotation，主要用于表明当前组件在整个项目中的作用，比如@Service、@Repository、@Controllr）。它的作用是让spring和阅读代码的人知道当前class所扮演的角色。<br>​    <code>@RequestMapping</code>注解提供路由信息。它告诉spring，任何的对/的HTTP请求，都会被映射到home方法上。<code>@RestController</code>让spring直接将字符串结果返回给调用者。</li>
<li><h6 id="EnableAutoConfiguration注解"><a href="#EnableAutoConfiguration注解" class="headerlink" title=" @EnableAutoConfiguration注解"></a><code> @EnableAutoConfiguration</code>注解</h6>​    <code> @EnableAutoConfiguration</code>使用用来让springboot去推测如何配置Spring，主要基于所添加的jar依赖。因为<code>spring-boot-starter-web</code>添加了Tomcat和Spring MVC，自动配置假设当前正在开发一个web应用并作相应的设置。<blockquote>
<p>Starters和自动配置（Auto-configuration）</p>
<p>​    自动配置和“Starters”可以很好的配合，但是这个两个概念并没有直接的关联。可以在sterer之外自由选择jar依赖，Spring Boot会尽可能地自动配置整个应用。</p>
</blockquote>
</li>
<li><h6 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h6>main方法是一个标准的复合Java规范的方法，是整个应用程序的入口。通过调用<code>run</code>方法，main方法完成了对Spring Boot的<code>SpringApplication</code>的代理。<code>SpringApplication</code>启动应用程序，启动Spring，同时自动配置Tomcat服务器。我们需要将<code>MyApplication.class</code>作为参数传递给<code>run</code>方法，从而让<code>SpringApplication</code>知道那个是Spring的基本组件。<code>args</code>数组同时也将命令行参数传递。</li>
<li>可以直接运行项目，并且访问8080端口即可看到输出。</li>
</ol>
</li>
<li><h5 id="创建一个可执行的Jar"><a href="#创建一个可执行的Jar" class="headerlink" title="创建一个可执行的Jar"></a>创建一个可执行的Jar</h5>​    通过创建一个可执行的独立的Jar文件，完成了实例。可执行Jar（有时也被称作“fat jars” 胖jar），是一个包含编译后的class文件和运行时依赖的jar的文档。<blockquote>
<p>可执行Jar和Java</p>
<p>​    Java并没有提供一种标准的方法,去载入嵌套的jar文件(jar文件被包含在一个jar文件内部).如果想要分发一个自包含的应用,可能会有问题.</p>
<p>​    去解决这个问题,许多开发者使用uber jar.一个uber jar把应用所需要的依赖的class文件打包进一个文档.这种方式的问题在于,去看当前应用程序中有哪些库变得很困难.同样,如果存在文件同名的情况,也会导致问题.</p>
</blockquote>
​    去创建一个可执行的jar,需要将<code>spring-boot-maven-plugin</code>添加到<code>pom.xml</code>中.需要再<code>dependency</code>后面添加如下部分.<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

​    调用mvn package命令 ,对程序进行打包.然后在<code>target</code>目录中,可以看到制作完成的jar包<code>myproject-0.0.1-SNAPSHOT.jar</code>.文件应该在10M左右.​    同时也可以看到一个小的多的文件,<code>myproject-0.0.1-SNAPSHOT.jar.original</code>.这个是maven打包的初始的jar,Spring Boot对这个进行再打包.​    运行程序,可以使用<code>java -jar</code>命令来运行打包后的应用.使用<code>ctrl -c</code>结束整个应用.</li>
</ol>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
</search>
